{"ast":null,"code":"import _objectSpread from \"/home/mastercalin/Desktop/social-client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/mastercalin/Desktop/social-client/src/components/PostScream.js\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport MyButton from \"../util/MyButton\"; // Redux\n\nimport { connect } from \"react-redux\";\nimport { postScream, clearErrors } from \"../redux/actions/dataActions\"; //Mui\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst styles = theme => _objectSpread({}, theme.spreadThis, {\n  submitButton: {\n    position: \"relative\",\n    float: \"right\",\n    marginTop: 10\n  },\n  progressSpinner: {\n    position: \"absolute\"\n  },\n  closeButton: {\n    position: \"absolute\",\n    left: \"91%\",\n    top: \"6%\"\n  }\n});\n\nclass PostScream extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      body: \"\",\n      errors: {}\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.props.clearErrors();\n      this.setState({\n        open: false,\n        errors: {}\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.postScream({\n        body: this.state.body\n      });\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.erros) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({\n        body: \"\",\n        open: false,\n        errors: {}\n      });\n      this.setState({});\n    }\n  }\n\n  render() {\n    const errors = this.state.errors;\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          loading = _this$props.UI.loading;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(MyButton, {\n      onClick: this.handleOpen,\n      tip: \"Post a post! :))\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(AddIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(MyButton, {\n      tip: \"Close\",\n      onClick: this.handleClose,\n      tipClassName: classes.closeButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Post something!\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      name: \"body\",\n      type: \"text\",\n      label: \"SCREAM!!\",\n      multiline: true,\n      row: \"3\",\n      placeholder: \"Scream at your fellow\",\n      error: errors.body ? true : false,\n      helperText: errors.body,\n      className: classes.textField,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.submitButton,\n      disabled: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Submit\", loading && React.createElement(CircularProgress, {\n      size: 30,\n      className: classes.progressSpinner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nPostScream.propType = {\n  postScream: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapstateToProps = state => ({\n  UI: state.UI\n});\n\nexport default connect(mapstateToProps, {\n  postScream,\n  clearErrors\n})(withStyles(styles)(PostScream));","map":{"version":3,"sources":["/home/mastercalin/Desktop/social-client/src/components/PostScream.js"],"names":["React","Component","Fragment","PropTypes","withStyles","MyButton","connect","postScream","clearErrors","Button","TextField","Dialog","DialogContent","DialogTitle","CircularProgress","AddIcon","CloseIcon","styles","theme","spreadThis","submitButton","position","float","marginTop","progressSpinner","closeButton","left","top","PostScream","state","open","body","errors","handleOpen","setState","handleClose","props","handleChange","event","target","name","value","handleSubmit","preventDefault","componentWillReceiveProps","nextProps","UI","erros","loading","render","classes","textField","propType","func","isRequired","object","mapstateToProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,QAAP,MAAqB,kBAArB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,8BAAxC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,MAAMC,MAAM,GAAGC,KAAK,sBACfA,KAAK,CAACC,UADS;AAElBC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,UADE;AAEZC,IAAAA,KAAK,EAAE,OAFK;AAGZC,IAAAA,SAAS,EAAE;AAHC,GAFI;AAOlBC,EAAAA,eAAe,EAAE;AACfH,IAAAA,QAAQ,EAAE;AADK,GAPC;AAUlBI,EAAAA,WAAW,EAAE;AACXJ,IAAAA,QAAQ,EAAE,UADC;AAEXK,IAAAA,IAAI,EAAE,KAFK;AAGXC,IAAAA,GAAG,EAAE;AAHM;AAVK,EAApB;;AAiBA,MAAMC,UAAN,SAAyB3B,SAAzB,CAAmC;AAAA;AAAA;AAAA,SACjC4B,KADiC,GACzB;AACNC,MAAAA,IAAI,EAAE,KADA;AAENC,MAAAA,IAAI,EAAE,EAFA;AAGNC,MAAAA,MAAM,EAAE;AAHF,KADyB;;AAAA,SAiBjCC,UAjBiC,GAiBpB,MAAM;AACjB,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD,KAnBgC;;AAAA,SAoBjCK,WApBiC,GAoBnB,MAAM;AAClB,WAAKC,KAAL,CAAW5B,WAAX;AACA,WAAK0B,QAAL,CAAc;AAAEJ,QAAAA,IAAI,EAAE,KAAR;AAAeE,QAAAA,MAAM,EAAE;AAAvB,OAAd;AACD,KAvBgC;;AAAA,SAwBjCK,YAxBiC,GAwBlBC,KAAK,IAAI;AACtB,WAAKJ,QAAL,CAAc;AAAE,SAACI,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AAApC,OAAd;AACD,KA1BgC;;AAAA,SA2BjCC,YA3BiC,GA2BlBJ,KAAK,IAAI;AACtBA,MAAAA,KAAK,CAACK,cAAN;AACA,WAAKP,KAAL,CAAW7B,UAAX,CAAsB;AAAEwB,QAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWE;AAAnB,OAAtB;AACD,KA9BgC;AAAA;;AAMjCa,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,QAAIA,SAAS,CAACC,EAAV,CAAaC,KAAjB,EAAwB;AACtB,WAAKb,QAAL,CAAc;AACZF,QAAAA,MAAM,EAAEa,SAAS,CAACC,EAAV,CAAad;AADT,OAAd;AAGD;;AACD,QAAI,CAACa,SAAS,CAACC,EAAV,CAAad,MAAd,IAAwB,CAACa,SAAS,CAACC,EAAV,CAAaE,OAA1C,EAAmD;AACjD,WAAKd,QAAL,CAAc;AAAEH,QAAAA,IAAI,EAAE,EAAR;AAAYD,QAAAA,IAAI,EAAE,KAAlB;AAAyBE,QAAAA,MAAM,EAAE;AAAjC,OAAd;AACA,WAAKE,QAAL,CAAc,EAAd;AACD;AACF;;AAeDe,EAAAA,MAAM,GAAG;AAAA,UACCjB,MADD,GACY,KAAKH,KADjB,CACCG,MADD;AAAA,wBAKH,KAAKI,KALF;AAAA,UAGLc,OAHK,eAGLA,OAHK;AAAA,UAICF,OAJD,eAILF,EAJK,CAICE,OAJD;AAMP,WACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,KAAKf,UAAxB;AAAoC,MAAA,GAAG,EAAC,kBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWC,IADnB;AAEE,MAAA,OAAO,EAAE,KAAKK,WAFhB;AAGE,MAAA,SAAS,MAHX;AAIE,MAAA,QAAQ,EAAC,IAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,oBAAC,QAAD;AACE,MAAA,GAAG,EAAC,OADN;AAEE,MAAA,OAAO,EAAE,KAAKA,WAFhB;AAGE,MAAA,YAAY,EAAEe,OAAO,CAACzB,WAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CANF,EAaE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAbF,EAcE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,QAAQ,EAAE,KAAKiB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAC,UAHR;AAIE,MAAA,SAAS,MAJX;AAKE,MAAA,GAAG,EAAC,GALN;AAME,MAAA,WAAW,EAAC,uBANd;AAOE,MAAA,KAAK,EAAEV,MAAM,CAACD,IAAP,GAAc,IAAd,GAAqB,KAP9B;AAQE,MAAA,UAAU,EAAEC,MAAM,CAACD,IARrB;AASE,MAAA,SAAS,EAAEmB,OAAO,CAACC,SATrB;AAUE,MAAA,QAAQ,EAAE,KAAKd,YAVjB;AAWE,MAAA,SAAS,MAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAcE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,OAAO,EAAC,WAFV;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,SAAS,EAAEa,OAAO,CAAC9B,YAJrB;AAKE,MAAA,QAAQ,EAAE4B,OALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAQGA,OAAO,IACN,oBAAC,gBAAD;AACE,MAAA,IAAI,EAAE,EADR;AAEE,MAAA,SAAS,EAAEE,OAAO,CAAC1B,eAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,CAdF,CADF,CAdF,CAJF,CADF;AAsDD;;AA3FgC;;AA8FnCI,UAAU,CAACwB,QAAX,GAAsB;AACpB7C,EAAAA,UAAU,EAAEJ,SAAS,CAACkD,IAAV,CAAeC,UADP;AAEpB9C,EAAAA,WAAW,EAAEL,SAAS,CAACkD,IAAV,CAAeC,UAFR;AAGpBR,EAAAA,EAAE,EAAE3C,SAAS,CAACoD,MAAV,CAAiBD;AAHD,CAAtB;;AAMA,MAAME,eAAe,GAAG3B,KAAK,KAAK;AAChCiB,EAAAA,EAAE,EAAEjB,KAAK,CAACiB;AADsB,CAAL,CAA7B;;AAIA,eAAexC,OAAO,CAACkD,eAAD,EAAkB;AAAEjD,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAlB,CAAP,CACbJ,UAAU,CAACa,MAAD,CAAV,CAAmBW,UAAnB,CADa,CAAf","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport MyButton from \"../util/MyButton\";\n// Redux\nimport { connect } from \"react-redux\";\nimport { postScream, clearErrors } from \"../redux/actions/dataActions\";\n//Mui\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst styles = theme => ({\n  ...theme.spreadThis,\n  submitButton: {\n    position: \"relative\",\n    float: \"right\",\n    marginTop: 10\n  },\n  progressSpinner: {\n    position: \"absolute\"\n  },\n  closeButton: {\n    position: \"absolute\",\n    left: \"91%\",\n    top: \"6%\"\n  }\n});\n\nclass PostScream extends Component {\n  state = {\n    open: false,\n    body: \"\",\n    errors: {}\n  };\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.erros) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({ body: \"\", open: false, errors: {} });\n      this.setState({});\n    }\n  }\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n  handleClose = () => {\n    this.props.clearErrors();\n    this.setState({ open: false, errors: {} });\n  };\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.postScream({ body: this.state.body });\n  };\n  render() {\n    const { errors } = this.state;\n    const {\n      classes,\n      UI: { loading }\n    } = this.props;\n    return (\n      <Fragment>\n        <MyButton onClick={this.handleOpen} tip=\"Post a post! :))\">\n          <AddIcon />\n        </MyButton>\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          fullWidth\n          maxWidth=\"sm\"\n        >\n          <MyButton\n            tip=\"Close\"\n            onClick={this.handleClose}\n            tipClassName={classes.closeButton}\n          >\n            <CloseIcon />\n          </MyButton>\n          <DialogTitle>Post something!</DialogTitle>\n          <DialogContent>\n            <form onSubmit={this.handleSubmit}>\n              <TextField\n                name=\"body\"\n                type=\"text\"\n                label=\"SCREAM!!\"\n                multiline\n                row=\"3\"\n                placeholder=\"Scream at your fellow\"\n                error={errors.body ? true : false}\n                helperText={errors.body}\n                className={classes.textField}\n                onChange={this.handleChange}\n                fullWidth\n              />\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submitButton}\n                disabled={loading}\n              >\n                Submit\n                {loading && (\n                  <CircularProgress\n                    size={30}\n                    className={classes.progressSpinner}\n                  />\n                )}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n\nPostScream.propType = {\n  postScream: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapstateToProps = state => ({\n  UI: state.UI\n});\n\nexport default connect(mapstateToProps, { postScream, clearErrors })(\n  withStyles(styles)(PostScream)\n);\n"]},"metadata":{},"sourceType":"module"}